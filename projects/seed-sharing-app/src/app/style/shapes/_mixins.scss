// TODO solution for CSS only classes to be able to use custom properties. problem here is that '#' needs to be url encoded with '%23' and there is no way to do this with plain CSS. Maybe other way to include the SVG

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin corner-convex($color, $scaleX, $scaleY) {
  // does not compile anymore if str-replacement is being done inline in background-image (used to work though)
  $color-escaped: str-replace(#{$color}, '#', '%23');
  //   $color-escaped: 'foo';
  background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" transform="scale(#{$scaleX},#{$scaleY})"><path fill="#{$color-escaped}" d="M 0 100 Q 100 100 100 0 L 100 100 Z"/></svg>');
}

@mixin corner-convex-y-top-right($border-radius, $color, $z-index: inherit) {
  position: relative;

  &::before {
    position: absolute;
    top: 0;
    right: calc(-1 * #{$border-radius});
    z-index: $z-index;
    width: $border-radius;
    height: $border-radius;
    content: '';
    @include corner-convex($color, -1, -1);
  }
}

@mixin corner-convex-y-bottom-right($border-radius, $color, $z-index: inherit) {
  position: relative;

  &::after {
    position: absolute;
    right: calc(-1 * #{$border-radius});
    bottom: 0;
    z-index: $z-index;
    width: $border-radius;
    height: $border-radius;
    content: '';
    @include corner-convex($color, -1, 1);
  }
}

@mixin corner-convex-x-bottom-left($border-radius, $color, $z-index: inherit) {
  position: relative;

  &::before {
    position: absolute;
    bottom: calc(-1 * #{$border-radius});
    left: 0;
    z-index: $z-index;
    width: $border-radius;
    height: $border-radius;
    content: '';
    @include corner-convex($color, -1, -1);
  }
}

@mixin corner-convex-x-bottom-right($border-radius, $color, $z-index: inherit) {
  position: relative;

  &::after {
    position: absolute;
    right: 0;
    bottom: calc(-1 * #{$border-radius});
    z-index: $z-index;
    width: $border-radius;
    height: $border-radius;
    content: '';
    @include corner-convex($color, 1, -1);
  }
}

@mixin corner-convex-x-top-right($border-radius, $color, $z-index: inherit) {
  position: relative;

  &::after {
    position: absolute;
    top: calc(-1 * #{$border-radius});
    right: 0;
    z-index: $z-index;
    width: $border-radius;
    height: $border-radius;
    content: '';
    @include corner-convex($color, 1, 1);
  }
}
