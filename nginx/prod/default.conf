server {
    listen $PORT default_server;

    # prevent nginx version being sent for security reasons
    server_tokens off;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    # WebSockets run on Hop-by-Hop protocol. Hop-by-Hop HTTP Headers need
    # to be forwarded by the proxy for the handshake. This is being done
    # here, otherwise lots of recurring and failing sockjs requests visible
    # on the network tab and error messages in console.

    # location /sockjs-node/ {
    #     proxy_http_version 1.1;

    #     # $http_foo contains the value of the header named 'foo'
    #     proxy_set_header 	Upgrade 		$http_upgrade;
    #     # no matter what the value is, we send "upgrade"
    #     proxy_set_header 	Connection 		"upgrade";

    #     proxy_pass https://edible-garden.herokuapp.com/sockjs-node/;
    # }


    ###### Gzip compression can be defined in these contexts: http, server, location
    # Brotli or gzip should not be used for binary files like JPEG, PNG, MP4. They are already compressed with format-specific compression
    gzip on;
    gzip_proxied    no-cache no-store private expired auth;
    # min. length of response to compress; default is 20 bytes; Compression
    # requires processing overhead and can negatively affect performance, so
    # compressing everything is not the best option
    gzip_min_length 1000;
    gzip_comp_level     6;
    # text/html is gzipped by default nginx config, here we only need to list additional mime
    # types
    # woff/woff2, mp3 are already compressed by design
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml
        application/rss+xml
        image/svg+xml;

    ###### Fall back to default language if no preference defined by browser
    # Alternative way of providing a fallback. Not needed, as the fallback is
    # defined in http context blocl if ($accept_language ~ "^$") {set
    # $accept_language "en";
    # }

    ######################
    # Redirect "/" to Angular app in browser's preferred language This redirect
    # works fine locally but on HEROKU it results in a 301 to
    # http://my-app.herokuapp.com:PORT/langCode and will cause a mixed-content
    # warning, because the redirect points from HTTPS to HTTP. I guess HEROKU
    # router interferes somewhere in between.
    # rewrite ^/$ /$accept_language permanent;

    # When the main domain (without request_uri path) is being hit, the user
    # should be redirected to his preferred accept_language.
    if ($request_uri = '/') {
        return 301 https://$host$request_uri$accept_language;
    }

    ###### Angular App
    location ~ ^/(de|en) {
        root /usr/share/nginx/html/;
        try_files $uri /$1/index.html?$args;
        expires -1;
        add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';

        #include /etc/nginx/conf.d/security_headers.conf;

        gzip_static   on;

        location ~* \.(json)$ {
            expires -1;
            add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        }

        location ~* \.(html|xml)$ {
            expires -1;
            add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            add_header X-XSS-Protection         "1; mode=block";
        }

        location ~* \.(css|js|eot|ttf|woff|woff2)$ {
            # these files are fingerprinted and can be safely cached long term
            add_header Cache-Control            "public, max-age=31536000, immutable";
        }

        location ~* \.(png|gif|ico)$ {
            add_header Cache-Control            "public, max-age=31536000, immutable";
        }
    }

    ###### API Backend
    location /edible-garden/ { # separate multiple paths by pipe within round brackets
        proxy_pass $NGINX_PROXY_PASS;

        #proxy_set_header 	Host 					$http_host;
        proxy_set_header 	X-Real-IP     		        $remote_addr; # is there a difference to $proxy_add_x_forwarded_for ?
        # originating IP addresses of the client connecting to a server through the proxy
        proxy_set_header 	X-Forwarded-For		        $proxy_add_x_forwarded_for;
        # original host requested by the client used to connect to the proxy: used for debugging, statistics
        proxy_set_header 	X-Forwarded-Host 	        $http_host;
        proxy_set_header 	X-NginX-Proxy   	        true;
        proxy_set_header    X-XSS-Protection            "1; mode=block";
        proxy_redirect      off;

        # timeout in seconds
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        send_timeout 300;

        # include /etc/nginx/conf.d/security_headers.conf;
    }

    # This prevents 404 errors. The Angular router itself would prevent 404 when
    # being inside base href (locale) but nginx would still give 404s for
    # requests to URLs without locale. This entry will prevent this now and must
    # be the last entry to serve as a fallback. If no other entry matches, we
    # will reroute the user to the index page of the Angular app.
    # Accept_language will be used to determine the right app. If the user has
    # an exotic language, accept language is filled with our desired fallback
    # language. The rest is being handled by Angular router: if the path
    # contains unknown stuff, Angular will reroute to a configured wildcard
    # route.
    location / {
        root /usr/share/nginx/html/;
        try_files $uri /$accept_language/index.html?$args;
        expires -1;
        add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';

        # include /etc/nginx/conf.d/security_headers.conf;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
