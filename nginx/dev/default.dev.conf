server {
    listen 80;
    server_name  localhost;

    # if requested with http, reroute to https
    if ($http_x_forwarded_proto != "https") {
        return 301 https://$host$request_uri;
    }
}

server {
    #################################################################################
    # Generated SSL configuration for nginx from Mozilla SSL Configuration Generator
    # https://ssl-config.mozilla.org/#server=nginx&version=1.19.6&config=modern&openssl=1.1.1d&guideline=5.6
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name  localhost;

    # prevent nginx version being sent for security reasons
    server_tokens off;

    ssl_certificate C:\dev\certs\localhost.pem;
    ssl_certificate_key C:\dev\certs\localhost-key.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    #ssl_trusted_certificate C:\dev\certs\localhost-fullchain.pem;

    # replace with the IP address of your resolver
    resolver 8.8.8.8;

    # disable content sniffing: https://stackoverflow.com/a/54481949/11964644
    add_header X-Content-Type-Options nosniff;

    # Enable Cross-site scripting (XSS) filter
    add_header X-XSS-Protection "1; mode=block";

    ###### Gzip compression can be defined in these contexts: http, server, location
    gzip                on;
    # text/html is gzipped by default nginx config, here we only need to list additional mime
    # types
    # woff/woff2, mp3 are already compressed by design
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml
        application/rss+xml
        image/svg+xml;
    # min. length of response to compress; default is 20 bytes; Compression
    # requires processing overhead and can negatively affect performance, so
    # compressing everything is not the best option
    gzip_min_length     1000;
    gzip_comp_level     6;
    gzip_proxied        no-cache no-store private expired auth;

    #############################################################################
    # Fallback to default language if no preference defined by browser
    # if ($accept_language ~ "^$") {
    #     set $accept_language "en";
    # }

    ######################
    # Redirect "/" to Angular app in browser's preferred language This redirect
    # works fine locally but on HEROKU it results in a 301 to
    # http://my-app.herokuapp.com:PORT/langCode and will cause a mixed-content
    # warning, because the redirect points from HTTPS to HTTP. I guess HEROKU
    # router hangs somewhere in between.
    #
    # rewrite ^/$ /$accept_language permanent;

    # When the main domain (without request_uri path) is being hit, the user
    # should be redirected to his preferred accept_language.
    if ($request_uri = '/') {
        return 301 https://$host$request_uri$accept_language;
    }

    #############################################################################
    # WebSockets run on Hop-by-Hop protocol. Hop-by-Hop HTTP Headers need
    # to be forwarded by the proxy for the handshake. This is being done
    # here, otherwise lots of recurring and failing sockjs requests visible
    # on the network tab and error messages in console.

    location /sockjs-node/ {
        proxy_http_version 1.1;

        # $http_foo contains always the value of the header named 'foo'
        proxy_set_header 	Upgrade 		$http_upgrade;
        proxy_set_header 	Connection 		$http_connection;

        proxy_pass https://localhost:4200/sockjs-node/;
    }

    # Use this for debugging against localhost
    # Remember, that angular can serve only one locale at once, so you can only access the running locale
    # location ~ ^/(de|en) {
    #     proxy_pass https://localhost:4200;
    # }

    # Use this for debugging against build in dist directiory
    location ~ ^/(de|en) {
        root C:/workspace/edible-garden-frontend/dist/seed-sharing-app/;
        try_files $uri /$1/index.html?$args;

        expires -1;
        add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        include c:/workspace/edible-garden-frontend/nginx/dev/security_headers.conf;

        gzip_static on;

        location ~* \.(json)$ {
            include c:/workspace/edible-garden-frontend/nginx/dev/security_headers.conf;
            expires -1;
            add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        }

        location ~* \.(html|xml)$ {
            include c:/workspace/edible-garden-frontend/nginx/dev/security_headers.conf;
            expires -1;
            add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            add_header X-XSS-Protection         "1; mode=block";
        }

        location ~* \.(css|js|eot|ttf|woff|woff2)$ {
            include c:/workspace/edible-garden-frontend/nginx/dev/security_headers.conf;
            # these files are fingerprinted and can be safely cached long term
            add_header Cache-Control            "public, max-age=31536000, immutable";
        }

        location ~* \.(png|gif|ico)$ {
            include c:/workspace/edible-garden-frontend/nginx/dev/security_headers.conf;
            add_header Cache-Control            "public, max-age=31536000, immutable";
        }
    }

    location /edible-garden/ { # separate multiple paths by pipe within round brackets
        #proxy_pass https://edible-garden-backend.herokuapp.com;
        proxy_pass https://localhost:3001;
        #proxy_pass_header   Set-Cookie;

        # Real-IP can be easily spoofed: should not be used for security topics but rather statistics, analytics etc.
        proxy_set_header X-Real-IP                  $remote_addr;
        # originating IP addresses of the client connecting to a server through the proxy
        proxy_set_header X-Forwarded-For            $proxy_add_x_forwarded_for;
        # original host requested by the client used to connect to the proxy: used for debugging, statistics
        proxy_set_header X-Forwarded-Host           $http_host;
        #proxy_set_header Host                      $http_host; # what is the difference to X-Forwarded-Host?
        proxy_set_header X-NginX-Proxy              true;

        proxy_set_header X-XSS-Protection           "1; mode=block";

        include c:/workspace/edible-garden-frontend/nginx/dev/security_headers.conf;
    }

    # This prevents 404 errors. The Angular router itself would prevent 404 when
    # being inside base href (locale) but nginx would still give 404s for
    # requests to URLs without locale. This entry will prevent this now and
    # must be the last entry to serve as a fallback. If no other entry matches,
    # we will reroute the user to the index page of the Angular app. Accept
    # language will be used to determine the right app. If the user has an
    # exotic language, accept language is filled with our desired fallback
    # language. The rest is being handled by Angular router: if the path
    # contains unknown stuff, Angular will reroute to a configured wildcard
    # route.
    location / {
        root /usr/share/nginx/html/;
        try_files $uri /$accept_language/index.html?$args;
        expires -1;
        add_header Cache-Control            'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';

        include c:/workspace/edible-garden-frontend/nginx/dev/security_headers.conf;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
